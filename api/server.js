// server.js
// where your node app starts

class Order {
  constructor(){
    this.cardName = ''
    this.cardLabels = []
    this.cardList = ''
    this.dateOfManufacture = new tempus()
    this.customerName = ''
    this.phone = ''
    this.address = ''
    this.comment = ''
    this.cakeInscription = []
    this.number = ''
    this.delivery = {
      exists: false,
      dateAndTime: ['', new tempus(), ''], // [0] - –ø–æ–º–µ—Ç–∫–∞ –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ [1] - –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ [2] - –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
      payment: ''
    }
    this.paid = false
    this.source = ''
  }

  toTGDriver() {
    var sign = ''
      this.cardLabels.forEach(element => {

        switch (element) {
          case '5f732800ff663327c3fbd0f8':
            sign += 'üîµ'
            break
          case '5ef9e4b20803133679c5cdf3':
            sign += 'üü£'
            break
          case '5ef9e4b24045be77a89ac083':
            sign += 'üî¥'
            break
          case '5f8725fa97f86380364b78eb':
            sign += 'üü°'
            break
          case '601270e5f2401d371c712ce7':
            sign += '‚ö´'
            break
          case '5ef9e4b1dd10b04388563f30':
            sign += 'üü¢'
            break
          }
      })


    let str = `${this.cardName} ${sign}
    \`–î–∞—Ç–∞:\` ${this.delivery.dateAndTime[0]} ${this.delivery.dateAndTime[1]} ${this.delivery.dateAndTime[2]}
    \`–ê–¥—Ä–µ—Å:\` [${this.address}](${this.address != '' ? 'https://yandex.by/maps/?text=' : ''}${this.address})
    \`–û–ø–ª–∞—Ç–∞:\` ${this.delivery.payment}
    \`–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω:\` ${this.customerName} [${this.phone}](tel:${this.phone})
    \`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\` ${this.comment}
    `
    return str
  }
}

class ServerParser {
  constructor(order){
    this.cardNew = order
  }
  insalesToOrder(request){

    // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –Ω–∞–¥–ø–∏—Å–∏ –∫ —Ç–æ—Ä—Ç–∞–º
    request.body.order_lines.forEach(element => {
      this.cardNew.cardName += `${element.title} ${element.quantity} —à—Ç`
      if (element.comment) {
        this.cardNew.cardName += ` (+–Ω–∞–¥–ø–∏—Å—å);\n`
        if (!this.cardNew.cardLabels.includes("601270e5f2401d371c712ce7")) this.cardNew.cardLabels.push("601270e5f2401d371c712ce7")
        this.cardNew.cakeInscription.push("[" + element.comment + "]")
      } else {
        this.cardNew.cardName += ';\n'
      }
    })

    // –¥–∞—Ç–∞, –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –ª—ç–π–±–ª—ã –∏ —Å–ø–∏—Å–æ–∫
    switch(request.body.delivery_title) {
      case '–ö—É—Ä—å–µ—Ä–æ–º –≤ –ú–∏–Ω—Å–∫–µ (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞)':
        this.cardNew.cardList = '5f732619e32a4c3d01e7d0bb'
        this.cardNew.delivery.exists = true
        this.cardNew.cardLabels.push('5f732800ff663327c3fbd0f8')
        break
      case '–ö—É—Ä—å–µ—Ä–æ–º –≤ –ú–∏–Ω—Å–∫–µ (–ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∑–∞—Ä–∞–Ω–µ–µ)':
        this.cardNew.cardList = '5f732619e32a4c3d01e7d0bb'
        this.cardNew.delivery.exists = true
        this.cardNew.cardLabels.push('5f732800ff663327c3fbd0f8')
        break
      case '–°–∞–º–æ–≤—ã–≤–æ–∑':
        this.cardNew.cardList = '5f73260fa857308dfac5e355'
        this.cardNew.delivery.exists = false
        this.cardNew.cardLabels.push('5ef9e4b20803133679c5cdf3')
        break
    }

    let deliveryDate = tempus(request.body.delivery_date)
console.log("request.body.delivery_from_hour = " + request.body.delivery_from_hour)
    if (request.body.delivery_from_hour == '' || request.body.delivery_from_hour == null) {
      this.cardNew.dateOfManufacture = new tempus(deliveryDate.format('%Y-%m-%d'))
      this.cardNew.dateOfManufacture.format('%Y-%m-%d')
      this.cardNew.delivery.dateAndTime[1] = deliveryDate.format('%Y-%m-%d') // –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç
      // this.cardNew.delivery.dateAndTime[2] = `—Å ${request.body.delivery_from_hour} –¥–æ ${request.body.delivery_to_hour}`

    } else {
      if (request.body.delivery_from_hour<14){  // –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏–¥–µ—Ç —Ä–∞–∑–¥–≤–æ–µ–Ω–∏–µ –¥–∞—Ç—ã - –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        this.cardNew.dateOfManufacture = new tempus(deliveryDate.format('%Y-%m-%d'))
        this.cardNew.dateOfManufacture.calc({year: 0, month: 0, day: -1})

        this.cardNew.delivery.dateAndTime[0] = '–∑–∞–≤—Ç—Ä–∞'
        this.cardNew.delivery.dateAndTime[1] = deliveryDate.format('%Y-%m-%d') // –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        this.cardNew.delivery.dateAndTime[2] = `—Å ${request.body.delivery_from_hour} –¥–æ ${request.body.delivery_to_hour}`
      } else {
        this.cardNew.dateOfManufacture = new tempus(deliveryDate.format('%Y-%m-%d'))
        this.cardNew.dateOfManufacture.format('%Y-%m-%d')
        this.cardNew.delivery.dateAndTime[1] = deliveryDate.format('%Y-%m-%d') // –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        this.cardNew.delivery.dateAndTime[2] = `—Å ${request.body.delivery_from_hour} –¥–æ ${request.body.delivery_to_hour}`
      }
    }

    // –≤—Ç–æ—Ä–æ–π –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏
    // if ((request.body.delivery_from_hour == '' || null) || request.body.delivery_from_hour>13) {
    //   this.cardNew.dateOfManufacture = new tempus(deliveryDate.format('%Y-%m-%d'))
    //   this.cardNew.dateOfManufacture.format('%Y-%m-%d')
    //   this.cardNew.delivery.dateAndTime[1] = deliveryDate.format('%Y-%m-%d') // –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    //   this.cardNew.delivery.dateAndTime[2] = `—Å ${request.body.delivery_from_hour} –¥–æ ${request.body.delivery_to_hour}`
    //   } else {
    //   this.cardNew.dateOfManufacture = new tempus(deliveryDate.format('%Y-%m-%d'))
    //   this.cardNew.dateOfManufacture.calc({year: 0, month: 0, day: -1})
    //   this.cardNew.delivery.dateAndTime[0] = '–∑–∞–≤—Ç—Ä–∞'
    //   this.cardNew.delivery.dateAndTime[1] = deliveryDate.format('%Y-%m-%d') // –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    //   this.cardNew.delivery.dateAndTime[2] = `—Å ${request.body.delivery_from_hour} –¥–æ ${request.body.delivery_to_hour}`
    //   }


    // –∞–¥—Ä–µ—Å
    if (request.body.shipping_address.full_delivery_address != '' || null) {
      this.cardNew.address = `${request.body.shipping_address.full_delivery_address}`
    }

    // –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    this.cardNew.customerName = request.body.shipping_address.name
    this.cardNew.phone = request.body.shipping_address.phone

    // –æ–ø–ª–∞—Ç–∞
    switch (request.body.payment_title){
      case '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É':
        this.cardNew.delivery.payment = `${request.body.total_price} —Ä—É–±. –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É`
        break
      case '–ö–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ WebPay':
        this.cardNew.delivery.payment = `–ö–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ WebPay. –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã`
        break
      case '–í –∫–æ—Ñ–µ–π–Ω–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ -15.0%':
        this.cardNew.delivery.payment = `–í –∫–æ—Ñ–µ–π–Ω–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞`
        break
    }
    if(request.body.paid_at != null) {
      this.cardNew.delivery.payment = `–û–ø–ª–∞—á–µ–Ω`
      this.cardNew.paid = true
    }

    // –∏—Å—Ç–æ—á–Ω–∏–∫
    this.cardNew.number = request.body.number

    // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
    if (request.body.comment) {
      this.cardNew.comment = request.body.comment  // –Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    }
    // id –∑–∞–∫–∞–∑–∞
    this.cardNew.id = request.body.id
   console.log('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞')
  return this.cardNew
  }

  createCardOnTrello(obj){

    var newCard = {
      name: obj.cardName,
      due: obj.dateOfManufacture.format('%Y-%m-%d'),
      idList: obj.cardList,
      idLabels: obj.cardLabels,
      desc:
      `\`–ê–¥—Ä–µ—Å:\` ${obj.address}
      \`–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\` ${obj.delivery.dateAndTime.join(' ')}
      \`–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω:\` ${obj.customerName} ${obj.phone}
      \`–û–ø–ª–∞—Ç–∞:\` ${obj.delivery.payment}
      \`–ò—Å—Ç–æ—á–Ω–∏–∫:\` insales ${obj.number}
      \`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\` ${obj.comment}`,
    }


    let response = fetch(`https://api.trello.com/1/cards?key=${process.env.TRELLO_KEY}&token=${process.env.TRELLO_TOKEN}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json;charset=utf-8'
      },
      body: JSON.stringify(newCard)
    })

      .then(function (response) {
        console.log('–û—Ç–≤–µ—Ç —Ç—Ä–µ–ª–ª–æ: ' + response.status)

        if (response.ok) {
          var changeStatus = {
            fulfillment_status: 'accepted',
          }
          let inSalesStatus = fetch(`https://myshop-sw911.myinsales.by/admin/orders/${obj.id}.json`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json;charset=utf-8',
              'Authorization': 'Basic M2ZiM2MyM2I3YmRmNmJiZTEyMGRiNDYyZTFhZmE2ZmY6MTg5MzI5ZjVmZGI3NmNjNTM5NmNmYjdiYzc4N2M5ZDI='
            },
            body: JSON.stringify(changeStatus)
          })

            .then(function (inSalesStatus) {
              if (inSalesStatus.ok){
                console.log('–û—Ç–≤–µ—Ç –∏–Ω—Å—ç–π–ª—Å: ' + inSalesStatus.status)
              } else {
                return '–ó–∞–∫–∞–∑ ‚Ññ ' + obj.number + ' –æ—à–∏–±–∫–∞ Insales' + inSalesStatus.status + '\n'
              }
            })
        } else {
            return '–ó–∞–∫–∞–∑ ‚Ññ ' + obj.number + ' –æ—à–∏–±–∫–∞ Trello' + response.status + '\n'
        }  //---------------–∫–æ–Ω–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç trello
    })  //----------------–∫–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ trello
    return true
  }

  updateCardTrello(){

  }

  getOrderFromTrello(){

  }

  //////////////////  –ü–û–õ–£–ß–ê–ï–ú –°–ï–ì–û–î–ù–Ø–®–ù–ò–ï –ö–ê–†–¢–´ –ò–ó –¢–†–ï–õ–õ–û  //////////////////
  getTodayOrdersFromTrello(callback){  // –∫–æ–ª–±—ç–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä–µ—Ö –º–∞—Å—Å–∏–≤–æ–≤: –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏, –∑–∞–∫–∞–∑—ã –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞, –∑–∞–∫–∞–∑—ã –±–µ–∑ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
    fetch(`https://api.trello.com/1/boards/${process.env.TRELLO_WORKBOARD_ID}/cards?key=${process.env.TRELLO_KEY}&token=${process.env.TRELLO_TOKEN}`)
    .then(function(res){
      if (!res.ok) {
        return `–æ—à–∏–±–∫–∞ —Ç—Ä–µ–ª–ª–æ ${res.status}`  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
      }
      return res.json()
    })
    .then(function(json){
      let cardsFromTrello = json
      var pseudoArray = Object.entries(cardsFromTrello)

      var messageForCoffeeshop = ''
      var cardsArrayDelivery = []
      var cardsArrayPickUp = []
      var cardsArrayOther = []

      for (var i = 0; i<pseudoArray.length; i++){
        if (pseudoArray[i][1].due != null){
          if(pseudoArray[i][1].due.substring(0, 10) == tempus().format('%Y-%m-%d')){  //–æ—Ç–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          // —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ —Å–∞–º–æ–≤—ã–≤–æ–∑—É
          // —ç—Ç–æ –±—É–¥—É—â–∏–π –ø–∞—Ä—Å–µ—Ä. –±—É–¥–µ–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º –µ–µ –≤ –º–∞—Å—Å–∏–≤

            let cardNew = new Order  // —Å–æ–∑–¥–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            cardNew.cardName = pseudoArray[i][1].name  // –Ω–µ–≤–µ—Ä–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å —É—á–µ—Ç–æ–º –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ç–æ—Ä—Ç
            cardNew.cardLabels = pseudoArray[i][1].idLabels
            cardNew.cardList = pseudoArray[i][1].idList
            cardNew.dateOfManufacture = pseudoArray[i][1].due.substring(0, 10)

// REGEXP—ã. –ø–∞—Ä—Å–µ—Ä –Ω–∞ regexp –Ω—É–∂–Ω–æ –∑–∞–ø–∏–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            var str = pseudoArray[i][1].desc
            let regex = /`[:a-zA-Z–∞-—è–ê-–Ø0-9\s]+`[^`]+/g;
            let regexDate = /(?<=\D|^)(?<year1>\d{4})(?<sep>[^\w\s])(?<month1>1[0-2]|0[1-9])\k<sep>(?<day1>0[1-9]|[12][0-9]|(?<=11\k<sep>|[^1][4-9]\k<sep>)30|(?<=1[02]\k<sep>|[^1][13578]\k<sep>)3[01])(?=\D|$)|(?<day>0[1-9]|1[0-9]|2[0-9]|3[01]).(?<month>0[1-9]|1[012]).(?<year>[0-9]{4})/g
            let temp;
            let match = []

            while ((temp = regex.exec(str)) !== null) {
              if (temp.index === regex.lastIndex) {
                regex.lastIndex++;
              }
              temp = temp.toString().replace(/^\s+|^\n+|\s+$/g, '')
              match.push(temp)
            }
            if(match == ''){
              messageForCoffeeshop = `–∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ${pseudoArray[i][1].name}`
              cardNew.comment = pseudoArray[i][1].desc
              cardNew.cardLabels.forEach(element => {
                switch(element){
                  case '5f732800ff663327c3fbd0f8':
                    cardsArrayDelivery.push(cardNew)
                  break
                  case '5ef9e4b20803133679c5cdf3':
                    cardsArrayPickUp.push(cardNew)
                  break
                    cardsArrayOther.push(cardNew)
                  break
                }
              })
              continue
            }

            for(let k = 0; k < match.length; k++){

              // –ê–¥—Ä–µ—Å
              if(match[k].includes('–ê–¥—Ä–µ—Å:')){
                if((/[a-zA-Z–∞-—è–ê-–Ø0-9]/g).test(match[k].substring(8))){
                  if((/\[.*\]/g).test(match[k])){
                  cardNew.address = match[k].match(/\[.*\]/g).toString().substring(1, match[k].match(/\[.*\]/g).toString().length-1)
                  } else {
                  cardNew.address = match[k].substring(8)
                  }
                  cardNew.delivery.exists = true
                } else {
                  cardNew.address = ''
                  cardNew.delivery.exists = false
                }
              }

              // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
              if(match[k].includes('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:')){
                if(cardNew.delivery.exists){
                  if(match[k].includes('–∑–∞–≤—Ç—Ä–∞')){
                    cardNew.delivery.dateAndTime[0] = '–∑–∞–≤—Ç—Ä–∞'
                    // cardNew.delivery.dateAndTime[1] = new tempus(match[k].substring(32, 42)).format('%Y-%m-%d')
                    cardNew.delivery.dateAndTime[1] = match[k].substring(32, 42)
                  } else {
                    cardNew.delivery.dateAndTime[0] = ''
                    cardNew.delivery.dateAndTime[1] = match[k].match(regexDate)
                  }

                  (/—Å \d+ –¥–æ \d+/g).test(match[k]) ? cardNew.delivery.dateAndTime[2] = match[k].match(/—Å \d+ –¥–æ \d+/g) : cardNew.delivery.dateAndTime[2] = ''
                }
              }

              // –ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
              if(match[k].includes('–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω:')){
                cardNew.customerName = match[k].substring(16).match(/[a-zA-Z–∞-—è–ê-–Ø\s]+/g).toString().trim()
                cardNew.phone = match[k].match(/[+0-9]+/g)
              }

              // –û–ø–ª–∞—Ç–∞
              if(match[k].includes('–û–ø–ª–∞—Ç–∞:')){
                if (match[k].substring(10, 17) === '–û–ø–ª–∞—á–µ–Ω' | '–æ–ø–ª–∞—á–µ–Ω') {
                  cardNew.paid = true
                  cardNew.delivery.payment = `–û–ø–ª–∞—á–µ–Ω`
                } else {
                  cardNew.paid = false
                  cardNew.delivery.payment = match[k].substring(10)
                }
              }

              // –ò—Å—Ç–æ—á–Ω–∏–∫
              if(match[k].includes('–ò—Å—Ç–æ—á–Ω–∏–∫:')){
                cardNew.source = match[k].substring(12)
                if((/insales/g).test(match[k])) cardNew.number == match[k].match(/\d+/g)
              }

              // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
              if(match[k].includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:')){
                cardNew.comment = match[k].substring(15)
              }
            } //------------—Ü–∏–∫–ª –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –¥–∏—Å–∫—Ä–∏–ø—à–∏–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏

            cardNew.cardLabels.forEach(element => {
              switch(element){
                case '5f732800ff663327c3fbd0f8':
                  cardsArrayDelivery.push(cardNew)
                break
                case '5ef9e4b20803133679c5cdf3':
                  cardsArrayPickUp.push(cardNew)
                break
                  cardsArrayOther.push(cardNew)
                break
              }
            })
          } //--------------—Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        }
      }  //-----------------—Ü–∏–∫–ª –ø–æ –≤—Å–µ–º –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º –∏–∑ —Ç—Ä–µ–ª–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º

      callback([cardsArrayDelivery, cardsArrayPickUp, cardsArrayOther])
      //-------–∫–æ–ª–ª–±—ç–∫ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π [0], –≤—Ç–æ—Ä–æ–π —Å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º [1], —Ç—Ä–µ—Ç–∏–π –±–µ–∑ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ [2]
    }) //-------------------–∫–æ–ª –±—ç–∫ –∏–∑ —Ç—Ä–µ–ª–ª–æ
  }

  parseTrelloDesc(){

    return  // –ø–∞—Ä—à–µ–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç—Ä–µ–ª–ª–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    }
}

// ca77e4e88e2582521b1c7aa0d199b2a7223491a8577250ac49cb9c63a4a31065
// MTM4ODYyMTg3NjpBQUVlcG5ndFhrbkQtOWtuczNjQ2UtemtJUXA2TzEzVDEybw==
// we've started you off with Express (https://expressjs.com/)
// but feel free to use whatever libraries or frameworks you'd like through `package.json`.
const tempus = require("tempusjs")
const express = require("express");
const fetch = require('node-fetch');
const app = express();
const ontime = require('ontime')
const TelegramBot = require('node-telegram-bot-api')
const bot = new TelegramBot(process.env.TG_BOT_TOKEN, {polling: true})
const chats = {
  office: '-567510185'
}

app.use(express.static("public"));
app.use(express.json()) // for parsing application/json
app.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded


app.post('/webhook', function (req, res) {
  res.send('Success')
  let newOrder = new Order  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç-–∑–∞–∫–∞–∑
  let parser = new ServerParser(newOrder)  // —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –æ–±—ä–µ–∫—Ç–æ–º
  parser.insalesToOrder(req)  // –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
  let response = parser.createCardOnTrello(newOrder)  // –ø–∞—Ä—Å–∏–º –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–µ–ª–ª–æ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É. –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
  if(response != true){
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –≤ –æ—Ñ–∏—Å –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    bot.sendMessage(chats.office, response)
    //----------------–∫–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
  }
})  //------------------–∫–æ–Ω–µ—Ü –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç insales

console.log('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ' + tempus().format('%Y-%m-%d %H:%M:%S'));

bot.onText(/\/dlv/, function (msg, match) {
  var chatId = msg.chat.id; // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

  new ServerParser().getTodayOrdersFromTrello((orders) => {
    orders[0].forEach((element) => {
      if(element != null || element != '') {

        bot.sendMessage(chatId, element.toTGDriver(), {
          parse_mode: "Markdown", disable_web_page_preview: true
        })
        .then(function (response) {
        console.log('–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: ' + response.ok)
        })
      } else { // —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–∏–¥–∏–º–æ, –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç—Ä–µ–ª–ª–æ

        bot.sendMessage(chatId, '–°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç—É', {
          parse_mode: "Markdown", disable_web_page_preview: true
          })
        .then(function (response) {
        console.log('–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: ' + response.ok)
        })
      }
    })
  })
})

bot.on("polling_error", console.log)

bot.onText(/\/all/, function (msg, match) {
  var chatId = msg.chat.id; // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

  new ServerParser().getTodayOrdersFromTrello((orders) => {
    orders.forEach(el => {
      el.forEach((element) => {
        if(element != null || '') {
          bot.sendMessage(chatId, element.toTGDriver(), {
            parse_mode: "Markdown", disable_web_page_preview: true
          })
          .then(function (response) {
          console.log('–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: ' + response.ok)
          })
        }
      })
    })
  })
})

const listener = app.listen(process.env.PORT, () => {
  console.log("Your app is listening on port " + listener.address().port);
});
